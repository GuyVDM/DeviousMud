// Hint files help the Visual Studio IDE interpret Visual C++ identifiers
// such as names of functions and macros.
// For more information see https://go.microsoft.com/fwlink/?linkid=865984
#define IMPLEMENT_LAYER_FUNCTIONS virtual bool HandleEvent(const SDL_Event& _event) override; virtual void Update() override;
#define IMPLEMENT_SERIALIZABLE virtual void Deserialize(nlohmann::json& _json); virtual void Serialize();
#define CEREAL_CLASS_VERSION(TYPE, VERSION_NUMBER) namespace cereal { namespace detail { template <> struct Version<TYPE> { static std::uint32_t registerVersion() { ::cereal::detail::StaticObject<Versions>::getInstance().mapping.emplace( std::type_index(typeid(TYPE)).hash_code(), VERSION_NUMBER ); return VERSION_NUMBER; } static inline const std::uint32_t version = registerVersion(); CEREAL_UNUSED_FUNCTION }; } }
#define CEREAL_CLASS_VERSION(TYPE, VERSION_NUMBER) namespace cereal { namespace detail { template <> struct Version<TYPE> { static const std::uint32_t version; static std::uint32_t registerVersion() { ::cereal::detail::StaticObject<Versions>::getInstance().mapping.emplace( std::type_index(typeid(TYPE)).hash_code(), VERSION_NUMBER ); return VERSION_NUMBER; } CEREAL_UNUSED_FUNCTION }; const std::uint32_t Version<TYPE>::version = Version<TYPE>::registerVersion(); } }
